* About

This is my attempt to reduce clutter when viewing org-mode files. I think it
looks noisy to look at all the markup, especially in README files when they are
display in Dired buffers with my [[https://github.com/amno1/dired-auto-readme][dired-auto-readme]] mode. When viewing org-files,
I am usually mostly interested in the content, not so in markup. Org-view-mode
is an attempt to create a read-only "viewer" mode. Thus per definition, this
minor mode is for consuming org content, not so much for creating it. It could
be actually renamed org-readme-mode, since I have created it mostly to read
README files in git repos without unnecessary noise :-). Also, don't expect this
to work well with org-capture, agendas, etc.

* News

<2022-02-09 Wen>

The mode is now completely refactored. Gone are small minor modes. I think it is
a bit confusing synnergi with main org-view-mode. Instead there are few
"features", named either as "prettify-" or "hide-" something, through which the
user can control what will be processed by org-view-mode. All those are exposed
as variables customizable via built-in "customize" options (or via init file if so
choosen). By default everything is on, so all options are opt-out.

** New feature: quick edit mode

I thought it would be nice to remove the read only status on the buffer, in case
I would like to do some simple edit, like fix a typo, or replace a word in the
text. It is now possible to put buffer in edit mode, by calling
/org-view-edit-on/, by default bound to 'e'. Once changes are saved, it will auto
switch back to read-only mode.

Changes can be aborted with /org-view-cancel-edit/ which is by default bound to
C-x C-q.

It is really meant just for quick and small fixes. To edit the org structure,
like add new headings and other markup, just disable org-view with 'q' and
re-enable it again when done.

** New  feature: pretty toc

If table of contents is present in the file, org-view-mode will hide enclosing
colons around the keyword as well as the end markup:

[[./images/toc.png]]


<2022-02-07 Mon>

** New feature: pretty paragraphs

Org-view can now prettify paragraphs. According to [[https://orgmode.org/manual/Paragraphs.html][org-manual]], text can be marked
as /quote/, /verse/ and /center/, for html export. I thought it would be nice to use
that markup to pretty-render text in org file, by visually marking it as a
quote, verse, or centering it on the screen. You can see the effect in the
screenshot below:

[[./images/paragraphs.png]]

I haven't tested this feature very extensively, so please let me know if it does
not work properly. For usage, see below.

** Improved compatibility with older Emacses

In the previous test, I used /string-pixel-width/ to calculate line lengths in
pixels for the alignment. This function is only available in the master and
will be available in Emacs in version 29.1. Instead, I now have a custom
function to calculate the pixel width for buffer lines, so org-view should be
compatible with older versions. I am not sure yet exactly which one is the
oldest supported, but I think it is 25.1 due to use of /font-lock-ensure/.

* Screencast

[[./images/screencast.gif]]
  
* Installation

** Package.el
This is not yet in any repository, but you can download org-view-mode.el
somewhere and use package.el to install file: M-x package-install-file RET and
follow the prompt.

** Straight
You may use straight.el to install this package, or some combination of straight & use-package
#+begin_src emacs-lisp
;; straight.el
(straight-use-package
 '(org-view-mode :type git :host github :repo "amno1/org-view-mode"))

;; use-package & straight
(use-package org-view-mode
             :straight (org-view-mode :type git :host github :repo "amno1/org-view-mode"))
#+end_src

** Manual
Either clone this repo or just download 'org-view-mode.el'.

Put org-view-mode.el somewhere in Emacs load-path. From there you
can just require the file somewhere in your init file or add autoload for
org-view-init mode to your init file.

* Requirements

Org-view does not use any external packages.
Minimal Emacs version supported is probably 25.1.

* Usage

** Org-view mode

M-x org-view-mode to turn it on/off.

** Shortcuts

Org-view-mode uses two mode maps: /org-view-mode-map/ and /org-view-edit-mode-map/.

The former is active when read-only mode is on, while the latter is active when
quick editing file. There really are not so many actions defines, only two:
enter-edi mode and exit org-view-mode. Of course org-mode map(s) are active all
the time. Maybe at some point in the future I might go through the mode and
choose which ones to enable or disable, but for the current, be aware that
all org-mode shortcuts are active and that some might not work due to read-only
status of the buffer while in org-view-mode.

** Fill-column

Some elements are centered in window in respect to fill-column value. Those are
currently paragraphs marked with begin/end-centered, title, author, and email
address. If fill-column is for some reason /nil/ or invalid (less than 1),
org-view will use the default fill-column of 80 columns. Controlled with:

/org-view-default-fill-column/

variable. Its value can be customized in customize options.

** Hiding markup

Org-view-mode will by default hide any line starting with '#+' to the end of
that line. Even new line '\n' character before the line is hidden, so that there
are visible empty lines where hidden text is. You can set:

/org-view-hide-keywords/

to nil to disable it.

In addition to regular markup, even some agenda keywords are hidden: DEFAULT:
and SCHEDULED:. Hiding those can be disabled by setting:

/org-view-hide-agenda-keywords/

to nil. Note that both variables have to be 't in order to hide agenda keywords.

** Pretty Credentials

To disable centering of title, author and email, set
/org-view-prettify-credentials/ to /nil/ value.

Centering is done with respect to fill-column value.

Only the /author/ and /email/ keywords are prettified as of currently along with the
/title/ keyword too. Co-authors are not yet prettified and are hidden by default,
as org-view does with other markup. Patch is welcome if someone would like to
implement that.

** Pretty Headings

By default org-view-mode hides leading stars in outline headings. You can
disable it by setting /org-view-hide-stars/ to /nil/.

Hiding tags and properties can be disabled by /setting org-view-hide-tags/ and
/org-view-hide-properties/ to /nil/.

** Pretty Quotes and Verses

Org-view will by default display text marked as /quote/ and /verse/ with their
own face and aligned to the left. To disable paragraph prettification set
/ort-view-prettify-paragraphs/ to /nil/.

The alignment is done in respect to the longest line in the paragraph. Variables
to control the alignment with are /org-view-quote-align/ and /org-view-verse-align/.

The control values you can assign to each are: 'left, 'right and 'middle.

Paragraphs marked with begin/end-center are always aligned in the middle.
The effect of each alignment is shown in the screenshot below:

[[./images/paragraphs-alignement.png]]

In quote and verse paragraphs it is also possible to prettify the author if it
is specified. The author should be prefixed with /---/ (three dashes) and
stretches to the end of the buffer line. By default, dashes are replaced with Unicode
drawing characters: ───. This option is controlled with /org-view-author-prefix/.

Faces used to display quotes, verses and credentials are:

/org-view-quote-face/, /org-view-verse-face/ and /org-view-author-face/

which can all be customized via customize options.

For other options avialable please see the org-view group in customize:

M-x customize-group RET org-view

* Issues

There might be lots of issues I am not aware of, since I haven't extensively
used this with many org files.

I would like to hear input, ideas, suggestions and problems found. I don't
promise to implement everything or any at all, but if something can be
implemented relatively easily and is useful, I would like to hear the idea.
Let me know.

* Special thanks

I am not a very good user of org-mode myself, so I don't have any org-mode files.
with complex markup of my own, so I have used some from others for both tests
and the screencast above. I would like to thank the authors for putting up their
code and README files and for letting us use them freely, in order of the
appearance in the screencast above, to [[https://github.com/oantolin][Omar Antolín Camarena]] for [[https://github.com/oantolin/orderless][Orderless]], [[https://github.com/takaxp][Takaaki
Ishikawa]] for [[https://github.com/takaxp/moom][moom]], [[https://github.com/protesilaos/mct][Protesilaos Stavrou]] for [[https://github.com/protesilaos/mct][mct]] and [[https://github.com/okamsn][Okamsn]] for [[https://github.com/okamsn/loopy][loopy]]. Thank you.

* License

GPL v3. For details, see the attached [[./LICENSE][license file]].
